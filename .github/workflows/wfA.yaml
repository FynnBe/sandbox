name: wfA

on:
  workflow_dispatch:
  push:
    branches: [ main ]
  pull_request:
    branches: [ main ]
    types: [ opened, reopened, closed ]

jobs:
  setup:
    runs-on: ubuntu-latest
    outputs:
      version_matrix: ${{ steps.cvm.outputs.version_matrix }}
    steps:
    - name: download version list
      run: wget https://files.ilastik.org/ilastik-versions-bmz.json
    - name: create version matrix
      id: cvm
      shell: python
      run: |
        import json

        with open("ilastik-versions-bmz.json") as f:
            vs = json.load(f)

        version_matrix = dict(include=[dict(v=v, env_url=f"https://files.ilastik.org/ilastik-{v}-Linux.yml") for v in vs])
        print(f"::set-output name=version_matrix::{version_matrix}")

  run:
    runs-on: ubuntu-latest
    needs: setup
    strategy:
      matrix: ${{ fromJson(needs.setup.outputs.version_matrix) }}
    defaults:
      run:
        shell: bash -l {0}
    steps:
    - uses: actions/checkout@v2
    - name: Setup ilastik env
      uses: conda-incubator/setup-miniconda@v2
      with:
          miniforge-variant: Mambaforge
          miniforge-version: latest
          activate-environment: ilastik-env
          use-mamba: true
    - name: Cache ilastik env
      uses: actions/cache@v2
      with:
        path: ${{ env.CONDA }}/envs
        key: conda-${{ runner.os }}--${{ runner.arch }}--${{ matrix.v }}-${{ env.CACHE_NUMBER }}
      env:
        # Increase this value to reset cache if etc/example-environment.yml has not changed
        CACHE_NUMBER: 0
      id: cache
    - name: Download ilastik env
      if: steps.cache.outputs.cache-hit != 'true'
      run: wget --output-document env.yaml ${{ matrix.env_url }}
    - name: Update environment
      if: steps.cache.outputs.cache-hit != 'true'
      run: mamba env update -n ilastik-env -f env.yaml
    - run: echo TEST
